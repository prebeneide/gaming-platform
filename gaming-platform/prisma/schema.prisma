// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  username  String   @unique
  password  String
  image     String?
  displayName String?
  bio         String?
  discord     String?
  twitter     String?
  twitch      String?
  steam       String?
  psn         String?
  xbox        String?
  customGames Json?
  followers   Follower[] @relation("UserFollowers")
  following   Follower[] @relation("UserFollowing")
  friendRequestsSent FriendRequest[] @relation("FriendRequestFrom")
  friendRequestsReceived FriendRequest[] @relation("FriendRequestTo")
  sentMessages Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follower {
  id          String @id @default(uuid())
  follower    User   @relation("UserFollowing", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("UserFollowers", fields: [followingId], references: [id])
  followingId String

  @@unique([followerId, followingId])
}

model FriendRequest {
  id         String   @id @default(uuid())
  from       User     @relation("FriendRequestFrom", fields: [fromId], references: [id])
  fromId     String
  to         User     @relation("FriendRequestTo", fields: [toId], references: [id])
  toId       String
  status     String   // "pending", "accepted", "declined"
  createdAt  DateTime @default(now())

  @@unique([fromId, toId])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId  String
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
}